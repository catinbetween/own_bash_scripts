#!/bin/bash


# preparing standard dimensions and values
directory=`pwd` #current directory
file=false
stdout=false
outputfile=false

acd=false
mcp=false

offset=true

acd_trim="2cm 0cm -10cm 0cm"
acd_offset='-10.5cm 1.5cm'

mcp_trim='0cm 0cm -8cm 0cm'
mcp_offset='-8cm 0cm'

trimleft="2cm"
trimbottom="0cm"
trimright="-10cm"
trimtop="0cm"

offset_l_r="-10.5cmcm"
offset_t_b="1.5cm"


# Call getopt to validate the provided input
options=$(getopt -a -n options -o abtf:o: --long acd,mcp,trim,left:,right:,bottom:,top:,olr:,otb:,file:,out: -- "$@")
[ $? -eq 0 ] || { 
    echo "Incorrect options provided"
    exit 1
}


eval set -- "$options"
while true; do
    case "$1" in
    
     -a | --acd)
    	acd=true
    	;;
    	
    --mcp | -b)
    	mcp=true
    	;;
    	
    --trim | -t)
    	offset=false
    	;;
    	
    --file | -f) 
    	shift; # The arg is next in position args
        ARG=$1
        if [ -z ${ARG+x} ]; then  
            echo "--file needs a /path/to/file.pdf parameter"
            exit 1
        fi
        
	# extract name and path and create the full path 
	fullpath="`realpath \"$ARG\"`"
	
        filebase=`basename "${fullpath}" .pdf`
        filedir=`dirname "${fullpath}"`
        stdout="${filedir}/${filebase}_notes.pdf"
        file=$fullpath
        
        # check if input file exists
        if [ ! -f "${file}" ]; then echo "file does not exist: ${file}"; exit 1; fi
        pdf=${file: -4}
	# check if file is pdf
        if [[ ! "$pdf" = ".pdf" ]]; then echo "file needs to be a pdf: ${file}"; exit 1; fi
        
        #create output file name based on input file name, put in same directory as file 
        filebase=`basename "${file}" .pdf`
        filedir=`dirname "${file}"`
        ;;
        
        
    --out | -o) 
    	shift; 
        ARG=$1
	# check if parameter is given
        if [[ -z ${ARG+x} ]]; then  
            echo "--out needs a /path/to/output.pdf parameter"
            exit 1
        fi
        
       	# extract filename and path, create full output path
        fullpath="`realpath \"$ARG\"`"
        
        filebase=`basename "${fullpath}" .pdf`
        filedir=`dirname "${fullpath}"`
        stdout="${filedir}/${filebase}.pdf"
        outputfile=$fullpath
        
        
        #check if path can be created
        rm "${outputfile}";
        if mkdir "${outputfile}"; then
	    rmdir "${outputfile}"
	else 
	    echo "outputfile not creatable. No such file or directory";
	fi
        ;;
        
    --left)
     	shift; 
        ARG=$1
        if [[ -z ${ARG+x} ]]; then  
            echo "--left needs a \"Xcm\" parameter"
            exit 1
        else 
        	trimleft=$ARG
        fi
        ;;
    --right)
    	shift;
        ARG=$1
        if [[ -z ${ARG+x} ]]; then  
            echo "--right needs a \"Xcm\" parameter"
            exit 1
        else
        	trimright=$ARG
        fi
        ;;
    
    --bottom)
    	shift; 
        ARG=$1
        if [[ -z ${ARG+x} ]]; then  
            echo "--bottom needs a \"Xcm\" parameter"
            exit 1
        else
        	trimbottom=$ARG
        fi
        ;;
    
    --top)
    	shift;
        ARG=$1
        if [[ -z ${ARG+x} ]]; then
            echo "--top needs a \"Xcm\" parameter"
            exit 1
        else
        	trimtop=$ARG
        fi
        ;;
        
    --olr)
    	shift;
        ARG=$1
        if [[ -z ${ARG+x} ]]; then
            echo "--olr needs a \"Xcm\" parameter"
            exit 1
        else
        	offset_l_r=$ARG
        fi
        ;;
        
    --otb)
    	shift; 
        ARG=$1
        if [[ -z ${ARG+x} ]]; then
            echo "--otb needs a \"Xcm\" parameter"
            exit 1
        else
        	offset_t_b=$ARG
        fi
        ;;
    
    --)
        shift
        break
        ;;
        
    *)  
    	echo "Unexpected option: $1 - this should not happen."
	;;
    esac
    shift
done


# check argument integrity
if ( $acp ) && ( $mcp ); then
	echo "--acd and --mcp cannot be set together"
	exit 1;
fi
if ! [[ "$file" ]]; then
	echo "no file given. quit"
	exit 1;
fi

# determine values to be used
if ( $acp ); then
	loc_trim=$acd_trim;
	loc_offset=$acd_offset;
elif ( $mcp ); then
	loc_trim=$mcp_trim;
	loc_offset=$mcp_offset;
else
	loc_trim="${trimleft} ${trimbottom} ${trimright} ${trimltop}"
	loc_offset="${offset_l_r} ${offset_t_b}";
fi

# determine outputfile
if [[ $outputfile ]]; then 
	loc_out=$outputfile; 
else 
	loc_out=$stdout;
fi


if ( $trim ); then
		
	pdfjam --papersize '{1920px,1080px}' --trim "${loc_trim}" "${file}" -o "${loc_out}"
else	
	pdfjam --papersize '{1920px,1080px}' --offset "${loc_offset}" "${file}" -o "${loc_out}"
fi
